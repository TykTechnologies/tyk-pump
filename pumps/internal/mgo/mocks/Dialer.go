// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mgo "github.com/TykTechnologies/tyk-pump/pumps/internal/mgo"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Dialer is an autogenerated mock type for the Dialer type
type Dialer struct {
	mock.Mock
}

// Dial provides a mock function with given fields: _a0
func (_m *Dialer) Dial(_a0 string) (mgo.SessionManager, error) {
	ret := _m.Called(_a0)

	var r0 mgo.SessionManager
	if rf, ok := ret.Get(0).(func(string) mgo.SessionManager); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mgo.SessionManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialWithInfo provides a mock function with given fields: _a0
func (_m *Dialer) DialWithInfo(_a0 *mgo.DialInfo) (mgo.SessionManager, error) {
	ret := _m.Called(_a0)

	var r0 mgo.SessionManager
	if rf, ok := ret.Get(0).(func(*mgo.DialInfo) mgo.SessionManager); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mgo.SessionManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mgo.DialInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialWithTimeout provides a mock function with given fields: _a0, _a1
func (_m *Dialer) DialWithTimeout(_a0 string, _a1 time.Duration) (mgo.SessionManager, error) {
	ret := _m.Called(_a0, _a1)

	var r0 mgo.SessionManager
	if rf, ok := ret.Get(0).(func(string, time.Duration) mgo.SessionManager); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mgo.SessionManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
