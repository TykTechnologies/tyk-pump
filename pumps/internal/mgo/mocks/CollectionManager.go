// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mgo "github.com/TykTechnologies/tyk-pump/pumps/internal/mgo"
	mock "github.com/stretchr/testify/mock"
)

// CollectionManager is an autogenerated mock type for the CollectionManager type
type CollectionManager struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *CollectionManager) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *CollectionManager) Create(_a0 *mgo.CollectionInfo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mgo.CollectionInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropCollection provides a mock function with given fields:
func (_m *CollectionManager) DropCollection() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureIndex provides a mock function with given fields: _a0
func (_m *CollectionManager) EnsureIndex(_a0 mgo.Index) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(mgo.Index) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Indexes provides a mock function with given fields:
func (_m *CollectionManager) Indexes() ([]mgo.Index, error) {
	ret := _m.Called()

	var r0 []mgo.Index
	if rf, ok := ret.Get(0).(func() []mgo.Index); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mgo.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: docs
func (_m *CollectionManager) Insert(docs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, docs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(docs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
